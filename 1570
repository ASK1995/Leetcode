class SparseVector:
    def __init__(self, nums: List[int]):
        self.vec = []
        
        for index, num in enumerate(nums):
            if(num != 0):
                self.vec.append([index, num])

    # Return the dotProduct of two sparse vectors
    def dotProduct(self, vec: 'SparseVector') -> int:
        i1, i2 = 0, 0
        total = 0
        while(i1 < len(self.vec) and i2 < len(vec.vec)):
            v1 = self.vec[i1][0]
            v2 = vec.vec[i2][0]
            while(v1 != v2):
                if(v1 < v2):
                    i1 += 1
                else:
                    i2 += 1
                if(i1 < len(self.vec) and i2 < len(vec.vec)):
                    v1 = self.vec[i1][0]
                    v2 = vec.vec[i2][0]
                else:
                    return total
            
            total += self.vec[i1][1] * vec.vec[i2][1]
            i1 += 1
            i2 += 1
        
        return total

# Your SparseVector object will be instantiated and called as such:
# v1 = SparseVector(nums1)
# v2 = SparseVector(nums2)
# ans = v1.dotProduct(v2)+++++++++++++++-