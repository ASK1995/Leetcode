# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        l1 = self.leaves(root1)
        l2 = self.leaves(root2)
        i1, i2 = 0, 0
        if(len(l1) != len(l2)):
            return False
        for val1, val2 in zip(l1, l2):
            if(val1 != val2):
                return False
        return True
    
    def leaves(self, root: Optional[TreeNode]) -> List:
        if(root == None):
            return []
        if(root.left == None and root.right == None):
            return [root.val]
        return self.leaves(root.left) + self.leaves(root.right)